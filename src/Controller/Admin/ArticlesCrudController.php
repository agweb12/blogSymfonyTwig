<?php

namespace App\Controller\Admin;

use App\Entity\Articles;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\SecurityBundle\Security;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class ArticlesCrudController extends AbstractCrudController
{
    private Security $security; // C'est quoi Security ? C'est une classe de Symfony qui permet de gÃ©rer la sÃ©curitÃ© de l'application. Elle permet de vÃ©rifier si l'utilisateur est authentifiÃ© ou non, et de rÃ©cupÃ©rer les informations sur l'utilisateur connectÃ©.

    public function __construct(Security $security) // C'est quoi le constructeur ? C'est une mÃ©thode spÃ©ciale qui est appelÃ©e lors de la crÃ©ation d'un objet de la classe. Il permet d'initialiser les propriÃ©tÃ©s de l'objet
    {
        $this->security = $security; // On initialise la propriÃ©tÃ© security avec l'objet Security passÃ© en paramÃ¨tre
    }

    public static function getEntityFqcn(): string
    {
        return Articles::class;
    }

    // EntityManagerInterface est une interface de Doctrine qui permet de gÃ©rer les entitÃ©s et de les persister dans la base de donnÃ©es
    // persistEntity est une mÃ©thode qui permet de persister une entitÃ© dans la base de donnÃ©es
    // $entityManager est l'instance de EntityManagerInterface
    // $entityInstance est l'instance de l'entitÃ© Ã  persister
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void // est appelÃ©e juste avant l'insertion de n'importe quel objet
    {
        // On vÃ©rifie que l'objet qu'on va insÃ©rer est bien un objet de la classe Articles
        if(!$entityInstance instanceof Articles){
            return; // Si l'entitÃ© n'est pas une instance de Articles, on ne fait rien
        }

        $user = $this->security->getUser(); // On rÃ©cupÃ¨re l'utilisateur connectÃ© grÃ¢ce au service Security de Symfony
        $entityInstance->setUser($user); // On associe l'utilisateur Ã  l'article : on dit Ã  l'article qui est l'utilisateur connectÃ© qui a crÃ©Ã© l'article
        // setUser est une mÃ©thode de la classe Articles qui permet d'associer un utilisateur Ã  un article
        parent::persistEntity($entityManager, $entityInstance); // On appelle la mÃ©thode persistEntity de la classe parente (AbstractCrudController) pour persister l'entitÃ© dans la base de donnÃ©es
        // parent::persistEntity() est une mÃ©thode de la classe parente qui permet de persister l'entitÃ© dans la base de donnÃ©es
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')->hideOnForm()->hideOnIndex(), // on cache l'id sur le formulaire et sur l'index dans le tableau
            TextField::new('title'),
            TextareaField::new('content'),
            ImageField::new('image')->setBasePath('images/articles') // Chemin d'accÃ¨s Ã  l'image
                ->setUploadDir('public/images/articles') // RÃ©pertoire de tÃ©lÃ©chargement de l'image c'est l echmin sur le serveur oÃ¹ easyAdmin va stocker les images stockÃ©es
                ->setUploadedFileNamePattern('[randomhash].[extension]'), // ModÃ¨le de nom de fichier tÃ©lÃ©chargÃ©
            // setFormTypeOption('attr', ['accept' => 'image/*']), // Limiter le type de fichier Ã  une image
            DateTimeField::new('createdAt')->hideOnForm(), // C'est quoi "::" ? C'est un opÃ©rateur de rÃ©solution de portÃ©e (scope resolution operator) en PHP. Il est utilisÃ© pour accÃ©der Ã  des membres statiques, constants ou mÃ©thodes d'une classe.
            DateTimeField::new('updatedAt')->hideOnForm(),
            // Liste des catÃ©gories de l'article
            // Association ManyToMany avec la classe Categories
            // TextField::new('category.name'), // On cache le champ sur l'index
            // TextField::new('category')->setFormTypeOption('choice_label', 'name'), // On cache le champ sur l'index
            
            // ðŸ‘‡ Affichage en texte (juste sur l'index)
            // TextField::new('name', 'category')->onlyOnIndex(),
            AssociationField::new('category', 'category')->setFormTypeOption('choice_label', 'name')
                ->setLabel('CatÃ©gories')
                ->formatValue(function ($value, $entity) {
                // FormatValue est une mÃ©thode qui permet de formater la valeur d'un champ avant de l'afficher dans la liste
                // $value est la valeur du champ
                // $entity est l'entitÃ© courante
                // RÃ©cupÃ¨re les noms des catÃ©gories
                return implode(', ', $entity->getCategory()->map(function($category) { // c'est quoi map ? 
                    // C'est quoi map () ? C'est une mÃ©thode de la classe Collection qui permet de transformer chaque Ã©lÃ©ment d'une collection en un autre Ã©lÃ©ment ? C'est Ã  dire ? map permet de parcourir chaque Ã©lÃ©ment de la collection et d'appliquer une fonction Ã  chaque Ã©lÃ©ment. La fonction renvoie le nom de la catÃ©gorie
                    // et la mÃ©thode toArray() permet de convertir la collection en tableau
                    return $category->getName();
                })->toArray());
            }),
            AssociationField::new('user', 'Users')->hideOnForm()
        ];
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->add(Crud::PAGE_INDEX, Action::DETAIL); // Ajoute le bouton "DÃ©tails" sur la page d'index
    }
}
